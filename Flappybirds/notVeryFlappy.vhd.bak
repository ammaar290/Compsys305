LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.all;
USE IEEE.STD_LOGIC_ARITH.all;
USE IEEE.STD_LOGIC_UNSIGNED.all;

ENTITY notVeryFlappy IS
	PORT
		( clk, vert_sync				: IN std_logic;
		  pixel_row, pixel_column		: IN std_logic_vector(9 DOWNTO 0);
		  red, green, blue 				: OUT std_logic);		
END notVeryFlappy;

architecture behavior of notVeryFlappy is

	-- Signals for the bouncy_ball component
	SIGNAL ball_on					: std_logic;
	SIGNAL size 					: std_logic_vector(9 DOWNTO 0);  
	SIGNAL ball_y_pos				: std_logic_vector(9 DOWNTO 0);
	SIGNAL ball_x_pos				: std_logic_vector(10 DOWNTO 0);
	SIGNAL ball_y_motion			: std_logic_vector(9 DOWNTO 0);

	-- Signals for the pipeDynamic component
	SIGNAL pipe_on					: std_logic;
	SIGNAL pipe_size 				: std_logic_vector(9 DOWNTO 0);
	SIGNAL pipe1_y_pos, pipe2_y_pos	: std_logic_vector(9 DOWNTO 0);
	SIGNAL gap_height 				: integer := 100;
	SIGNAL pipe_x_pos 				: std_logic_vector(9 DOWNTO 0);

BEGIN           

	-- bouncy_ball component
	ball_on <= '1' when ( ('0' & ball_x_pos <= '0' & pixel_column + size) and ('0' & pixel_column <= '0' & ball_x_pos + size)
					and ('0' & ball_y_pos <= pixel_row + size) and ('0' & pixel_row <= ball_y_pos + size) ) else '0';

	-- pipeDynamic component
	pipe_on <= '1' when ( ('0' & pipe_x_pos <= pixel_column) and ('0' & pixel_column <= pipe_x_pos + pipe_size)
					and ( ('0' & pipe1_y_pos <= pixel_row) and ('0' & pixel_row <= pipe1_y_pos + pipe_size) or
						  ('0' & pipe2_y_pos <= pixel_row) and ('0' & pixel_row <= pipe2_y_pos + pipe_size) ) ) else '0';

	-- Colours for pixel data on video signal
	-- Changing the background and ball colour by pushbuttons
	Red <= (not ball_on) and (not pipe_on);
	Green <= ball_on;
	Blue <=  not ball_on;

	process (vert_sync)  	
	begin
		-- Move ball once every vertical sync
		if rising_edge(vert_sync) then			
			-- Bounce off top or bottom of the screen
			if ('0' & ball_y_pos >= CONV_STD_LOGIC_VECTOR(479,10) - size) then
				ball_y_motion <= -CONV_STD_LOGIC_VECTOR(2,10);
			elsif (ball_y_pos <= size) then 
				ball_y_motion <= CONV_STD_LOGIC_VECTOR(2,10);
			end if;
			-- Compute next ball Y position
			ball_y_pos <= ball_y_pos + ball_y_motion;
		end if;
	end process;

	process (clk)  	
	begin
		-- Move pipe once every clock cycle
		if rising_edge(clk) then
			if pipe_x_pos = CONV_STD_LOGIC_VECTOR(0,10) then
				pipe_x_pos <= CONV_STD_LOGIC_VECTOR(840,10);  -- reset position to the right corner when it reaches the left edge
			else
				pipe_x_pos <= pipe_x_pos - CONV_STD_LOGIC_VECTOR(1,10);  -- decrement the x-position by 1 in each clock cycle
			end if;
		end if;
	end process;

END behavior;
